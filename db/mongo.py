from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, PyMongoError
import os
from dotenv import load_dotenv
import logging
from typing import Optional, Dict, Any


load_dotenv("data/.env")


class MongoAPI:
    def __init__(self, uri=None, db_name=None, collection_name=None):
        self.uri = uri or os.getenv("MONGO_URI")
        self.db_name = db_name or os.getenv("MONGO_DB_NAME")
        self.collection_name = collection_name

        try:
            self.client = MongoClient(self.uri, serverSelectionTimeoutMS=5000)
            self.client.admin.command('ping')
            logging.info("Connected to MongoDB")

        except ConnectionFailure as e:
            logging.info(f"Error to connect MongoDB: {e}")

            raise

        self.db = self.client[self.db_name]
        self.collection = self.db[self.collection_name]

    def find_json_by_name(self, name: str) -> Optional[Dict[str, Any]]:
        """
        –ù–∞–π—Ç–∏ JSON-–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–ª–µ 'name').
        :param name: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è 'name'.
        :return: –ù–∞–π–¥–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ None.
        """
        try:
            result = self.collection.find_one({"name": name})
            if result:
                logging.info(f"üîç –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {name}")
            else:
                logging.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {name}")
            return result
        except PyMongoError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{name}': {e}")
            return None

    def update_json_by_name(self, name: str, new_data: Dict[str, Any]) -> bool:
        """
        –û–±–Ω–æ–≤–∏—Ç—å JSON-–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–ª–µ 'name').
        :param name: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è 'name'.
        :param new_data: –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å).
        :return: True, –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.
        """
        try:
            result = self.collection.update_one(
                {"name": name},
                {"$set": new_data}
            )
            if result.modified_count > 0:
                logging.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                return True
            else:
                logging.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç '{name}' –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω.")
                return False
        except PyMongoError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{name}': {e}")
            return False

    def create_json(self, data: Dict[str, Any]) -> bool:
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π JSON-–¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
        –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º 'name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç.
        :param data: JSON-–¥–∞–Ω–Ω—ã–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ 'name'.
        :return: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∞—á–µ False.
        """
        if "name" not in data:
            logging.error("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'name'.")
            return False

        if self.find_json_by_name(data["name"]):
            logging.warning(f"‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º '{data['name']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return False

        try:
            self.collection.insert_one(data)
            logging.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{data['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            return True
        except PyMongoError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{data['name']}': {e}")
            return False